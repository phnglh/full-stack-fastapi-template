/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ScheduleRouteImport } from './routes/schedule'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthRecoverPasswordRouteImport } from './routes/_auth/recover-password'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'

const ScheduleRoute = ScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthRecoverPasswordRoute = AuthRecoverPasswordRouteImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/schedule': typeof ScheduleRoute
  '/login': typeof AuthLoginRoute
  '/recover-password': typeof AuthRecoverPasswordRoute
  '/signup': typeof AuthSignupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/schedule': typeof ScheduleRoute
  '/login': typeof AuthLoginRoute
  '/recover-password': typeof AuthRecoverPasswordRoute
  '/signup': typeof AuthSignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/schedule': typeof ScheduleRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/recover-password': typeof AuthRecoverPasswordRoute
  '/_auth/signup': typeof AuthSignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/schedule' | '/login' | '/recover-password' | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/schedule' | '/login' | '/recover-password' | '/signup'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/schedule'
    | '/_auth/login'
    | '/_auth/recover-password'
    | '/_auth/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ScheduleRoute: typeof ScheduleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/schedule': {
      id: '/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ScheduleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/recover-password': {
      id: '/_auth/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof AuthRecoverPasswordRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRecoverPasswordRoute: typeof AuthRecoverPasswordRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRecoverPasswordRoute: AuthRecoverPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ScheduleRoute: ScheduleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
